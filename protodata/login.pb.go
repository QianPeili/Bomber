// Code generated by protoc-gen-go.
// source: protodata/login.proto
// DO NOT EDIT!

package protodata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Flag FlagNum_Flag `protobuf:"varint,1,opt,name=flag,enum=protodata.FlagNum_Flag" json:"flag,omitempty"`
	Desc string       `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *LoginResponse) GetFlag() FlagNum_Flag {
	if m != nil {
		return m.Flag
	}
	return FlagNum_eUnknown
}

func (m *LoginResponse) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func init() {
	proto.RegisterType((*LoginRequest)(nil), "protodata.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "protodata.LoginResponse")
}

func init() { proto.RegisterFile("protodata/login.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x49, 0x2c, 0x49, 0xd4, 0xcf, 0xc9, 0x4f, 0xcf, 0xcc, 0xd3, 0x03, 0xf3, 0x85, 0x38,
	0xe1, 0xc2, 0x52, 0x48, 0x2a, 0xd2, 0x72, 0x12, 0xd3, 0x8b, 0x21, 0x2a, 0x94, 0xdc, 0xb8, 0x78,
	0x7c, 0x40, 0x1a, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38, 0x4a, 0x8b,
	0x53, 0x8b, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x90,
	0x5c, 0x41, 0x62, 0x71, 0x71, 0x79, 0x7e, 0x51, 0x8a, 0x04, 0x13, 0x44, 0x0e, 0xc6, 0x57, 0x0a,
	0xe0, 0xe2, 0x85, 0x9a, 0x53, 0x5c, 0x90, 0x9f, 0x57, 0x9c, 0x2a, 0xa4, 0xcd, 0xc5, 0x02, 0xb2,
	0x07, 0x6c, 0x08, 0x9f, 0x91, 0xb8, 0x1e, 0xdc, 0x7a, 0x3d, 0xb7, 0x9c, 0xc4, 0x74, 0xbf, 0xd2,
	0x5c, 0x30, 0x1d, 0x04, 0x56, 0x24, 0x24, 0xc4, 0xc5, 0x92, 0x92, 0x5a, 0x9c, 0x0c, 0x35, 0x15,
	0xcc, 0x4e, 0x62, 0x03, 0xeb, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x00, 0x99, 0x4b, 0x51,
	0xdb, 0x00, 0x00, 0x00,
}
